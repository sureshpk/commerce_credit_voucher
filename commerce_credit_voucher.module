<?php
/**
 * @file
 * Provides a credit voucher payment method for Drupal Commerce.
 */

/**
 * Implements hook_init().
 */
function commerce_credit_voucher_init() {
}


/**
 * Implements hook_entity_info().
 */
function commerce_credit_voucher_entity_info() {
  $entity_info = array();

  $entity_info['commerce_credit_voucher'] = array(
    'label' => t('Commerce Credit Voucher'),
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_credit_voucher',
    'uri callback' => 'commerce_credit_voucher_uri',
    'entity keys' => array(
      'id' => 'voucher_id',
    ),
    'bundles' => array(),
  );

  return $entity_info;
}


/**
 * Loads node entities from the database.
 *
 * This function should be used whenever you need to load more than one voucher
 * from the database. Vouchers are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @param $nids
 *   An array of commerce credit voucher IDs.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the {commerce_credit_voucher}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param $reset
 *   Whether to reset the internal node_load cache.
 *
 * @return
 *   An array of commerce_credit_voucher objects indexed by voucher_id.
 */
function commerce_credit_voucher_load_multiple($voucher_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_credit_voucher', $voucher_ids, $conditions, $reset);
}


/**
 * Loads a commerce_credit_voucher object from the database.
 *
 * @param $voucher_id
 *   The voucher ID.
 * @param $voucher_revision_id
 *   The voucher revision ID (but this module doesn't support revisions).
 * @param $reset
 *   Whether to reset the commerce_credit_voucher_load cache.
 *
 * @return
 *   A fully-populated commerce_credit_voucher object, or FALSE if the
 *   commerce_credit_voucher is not found.
 */
function commerce_credit_voucher_load($voucher_id = NULL, $voucher_revision_id = NULL, $reset = FALSE) {
  $voucher_ids = isset($voucher_id) ? array($voucher_id) : array();
  $conditions = array();
  $commerce_credit_voucher = commerce_credit_voucher_load_multiple($voucher_ids, $conditions, $reset);

  return $commerce_credit_voucher ? reset($commerce_credit_voucher) : FALSE;
}


/**
 * Loads a commerce_credit_voucher object by code from the database.
 *
 * @param $code
 *   The voucher code.
 * @param $force_active
 *   Force to only list active vouchers.
 * @param $force_date_range
 *   Force to only list vouchers within a valid date range.
 *
 * @return
 *   A fully-populated commerce_credit_voucher object, or FALSE if the
 *   commerce_credit_voucher is not found.
 */
function commerce_credit_voucher_load_by_code($code, $force_active = TRUE, $force_date_range = TRUE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_credit_voucher')
        ->propertyCondition('code', $code);

  // Make sure only active vouchers are pulled out.
  if ($force_active) {
    $query->propertyCondition('is_active', $force_active);
  }

  // Make sure only vouchers within the start and end date range are pulled out.
  if ($force_date_range) {
    $query->propertyCondition('start_date', strtotime("now"), '<');
    $query->propertyCondition('end_date', strtotime("now"), '>');
  }

  // Finally execute the query.
  $entities = $query->execute();

  $return = FALSE;

  if (isset($entities['commerce_credit_voucher'])) {
    $voucher_ids = array_keys($entities['commerce_credit_voucher']);
    $commerce_credit_voucher = commerce_credit_voucher_load_multiple($voucher_ids);

    $return = $commerce_credit_voucher ? reset($commerce_credit_voucher) : FALSE;
  }

  return $return;
}


/**
 * Saves a commerce_credit_voucher.
 *
 * @param $commerce_credit_voucher
 *   The full commerce_credit_voucher object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_credit_voucher_save($commerce_credit_voucher) {
  return entity_get_controller('commerce_credit_voucher')->save($commerce_credit_voucher);
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_credit_voucher_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_credit_voucher'] = array(
    'title' => t('Credit Voucher'),
    'description' => t('Takes the value of vouchers off the order total amount.'),
    'active' => TRUE,
  );

  return $payment_methods;
}


/**
 * Payment method callback: submit form.
 */
function commerce_credit_voucher_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_credit_voucher'])) {
    $pane_values += $order->data['commerce_credit_voucher'];
  }

  // Merge in default values.
  $pane_values += array(
    'voucher_code' => '',
  );

  $form['voucher_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Voucher Code'),
    '#default_value' => $pane_values['voucher_code'],
    '#required' => TRUE,
  );

  return $form;
}


/**
 * Payment method callback: submit form validation.
 */
function commerce_credit_voucher_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  $ret = FALSE;

  if (trim($pane_values['voucher_code']) != '') {
    if (!commerce_credit_voucher_is_valid($pane_values['voucher_code'], $order)) {
      drupal_set_message(t('The credit voucher code you entered is invalid.'), 'error');
    }
    else {
      $ret = TRUE;
    }
  }

  return $ret;
}


/**
 * Payment method callback: submit form submission.
 */
function commerce_credit_voucher_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_credit_voucher'] = $pane_values;

  $commerce_credit_voucher = commerce_credit_voucher_load_by_code($pane_values['voucher_code']);

  // Work out how much the user is going to be charged for.
  if ($charge['amount'] <= $commerce_credit_voucher->amount) {
    $ret = TRUE;
  }
  else {
    $charge['amount'] = $commerce_credit_voucher->amount;
    $ret = FALSE;
  }

  // Confirmation message.
  drupal_set_message(t('The credit voucher has been applied.'));

  // Perform a transaction.
  commerce_credit_voucher_transaction($payment_method, $order, $charge, $commerce_credit_voucher);

  return $ret;
}


/**
 * Creates a payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $commerce_credit_voucher
 *   The full commerce_credit_voucher object.
 */
function commerce_credit_voucher_transaction($payment_method, $order, $charge, $commerce_credit_voucher) {
  $transaction = commerce_payment_transaction_new('commerce_credit_voucher', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Voucher Code: @code';
  $transaction->message_variables = array('@code' => $commerce_credit_voucher->code, '@sku' => $commerce_credit_voucher->sku);

  // Make sure the credit voucher is flagged as inactive.
  if (commerce_payment_transaction_save($transaction)) {
    $commerce_credit_voucher->is_active = FALSE;
    commerce_credit_voucher_save($commerce_credit_voucher);
  }
}


/**
 * Checks if a given credit voucher is valid for a given code and order.
 *
 * @param $code
 *   The credit voucher code to validate.
 * @param $order
 *   The order at against the $code should be validated.
 *
 * @return boolean
 *   Returns whether a credit voucher is valid.
 */
function commerce_credit_voucher_is_valid($code, $order) {
  $commerce_credit_voucher = commerce_credit_voucher_load_by_code($code);

  // Return FALSE if voucher fails the basic validation.
  if (!$commerce_credit_voucher || $commerce_credit_voucher->amount <= 0) {
    return FALSE;
  }

  // Return TRUE if voucher doesn't have a SKU code.
  if (trim($commerce_credit_voucher->sku) == '') {
    return TRUE;
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // List of line items in the cart.
  $commerce_line_items = $order_wrapper->commerce_line_items;

  // List of SKU codes with quantities.
  $product_quantities = array();

  foreach ($commerce_line_items as $commerce_line_item) {
    $product = $commerce_line_item->commerce_product->value();
    if (!isset($product_quantities[$product->sku])) {
      $product_quantities[$product->sku] = 0;
    }
    $product_quantities[$product->sku] += $commerce_line_item->quantity->value();
  }

  // Return FALSE if the SKU on the voucher is not in the cart.
  if (!isset($product_quantities[$commerce_credit_voucher->sku])) {
    return FALSE;
  }

  // List of transactions for the order.
  $commerce_payment_transactions = commerce_payment_transaction_load_multiple(NULL, array('order_id' => $order_wrapper->order_id->value(), 'payment_method' => 'commerce_credit_voucher'));

  foreach ($commerce_payment_transactions as $commerce_payment_transaction) {
    $sku = $commerce_payment_transaction->message_variables['@sku'];

    // Check to see if there is a product in the cart with the same SKU code.
    if (isset($product_quantities[$sku])) {
      $product_quantity = $product_quantities[$sku];
      $product_quantities[$sku] = $product_quantities[$sku] - 1;
    }
    else {
      // TODO: User has payed for a product that is no longer in the cart.
    }
  }

  // Return FALSE if the voucher can't be used because of the product quantity.
  if ($product_quantities[$commerce_credit_voucher->sku] == 0) {
    return FALSE;
  }

  return TRUE;
}
