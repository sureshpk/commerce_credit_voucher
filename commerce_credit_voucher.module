<?php
/**
 * @file
 * Provides a credit voucher payment method for Drupal Commerce.
 */

/**
 * Implements hook_permission().
 */
function commerce_credit_voucher_permission() {
  return commerce_entity_access_permissions('commerce_credit_voucher');
}


/**
 * Implements hook_entity_info().
 */
function commerce_credit_voucher_entity_info() {
  $entity_info = array();

  $entity_info['commerce_credit_voucher'] = array(
    'label' => t('Commerce Credit Voucher'),
    'controller class' => 'CommerceCreditVoucherEntityController',
    'base table' => 'commerce_credit_voucher',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'voucher_id',
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (commerce_credit_voucher_types() as $type => $info) {
    $entity_info['commerce_credit_voucher']['bundles'][$type] = array(
      'label' => $info->name,
    );
  }

  return $entity_info;
}


/**
 * Entity uri callback: gives modules a chance to specify a path for a credit voucher.
 */
function commerce_credit_voucher_uri($commerce_credit_voucher) {
  foreach (module_implements('commerce_credit_voucher_uri') as $module) {
    $uri = module_invoke($module, 'commerce_credit_voucher_uri', $commerce_credit_voucher);

    // If the implementation returned data, use that now.
    if (!empty($uri)) {
      return $uri;
    }
  }

  return NULL;
}


/**
 * Returns an array of commerce credit vouchers types with a type key
 * name and description.
 */
function commerce_credit_voucher_types() {
  // First check the static cache for a commerce credit voucher types array.
  $credit_voucher_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($credit_voucher_types)) {

    // Find commerce credit voucher types defined by hook_commerce_customer_profile_type_info().
    foreach (module_implements('commerce_credit_voucher_type_info') as $module) {
      foreach (module_invoke($module, 'commerce_credit_voucher_type_info') as $type => $info) {
        // Initialize commerce credit voucher type properties.
        $defaults = array(
          'module' => $module,
        );

        $credit_voucher_types[$type] = (object) array_merge($defaults, $info);
      }
    }

    // Last allow the info to be altered by other modules.
    drupal_alter('commerce_credit_voucher_type_info', $credit_voucher_types);

  }

  return $credit_voucher_types;
}


/**
 * Defines the basic commerce credit voucher types using
 * hook_commerce_credit_voucher_type_info() implemented by this module.
 *
 * @see commerce_credit_voucher_types().
 */
function commerce_credit_voucher_commerce_credit_voucher_type_info() {
  $types = array();

  $types['fixed_amount'] = array(
    'type' => 'fixed_amount',
    'name' => t('Fixed Amount'),
    'description' => t('A fixed amount credit voucher.')
  );

  $types['percentage'] = array(
    'type' => 'percentage',
    'name' => t('Percentage'),
    'description' => t('A percentage credit voucher.')
  );

  return $types;
}


/**
 * Loads a commerce credit voucher type.
 *
 * @param $type
 *   The machine-readable name of the commerce credit voucher type; accepts normal
 *   machine names and URL prepared machine names with underscores replaced by
 *   hyphens.
 */
function commerce_credit_voucher_type_load($type) {
  $type = strtr($type, array('-' => '_'));
  $credit_voucher_types = commerce_credit_voucher_types();
  return !empty($credit_voucher_types[$type]) ? $credit_voucher_types[$type] : FALSE;
}


/**
 * Loads node entities from the database.
 *
 * This function should be used whenever you need to load more than one voucher
 * from the database. Vouchers are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @param $nids
 *   An array of commerce credit voucher IDs.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the {commerce_credit_voucher}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param $reset
 *   Whether to reset the internal node_load cache.
 *
 * @return
 *   An array of commerce_credit_voucher objects indexed by voucher_id.
 */
function commerce_credit_voucher_load_multiple($voucher_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_credit_voucher', $voucher_ids, $conditions, $reset);
}


/**
 * Loads a commerce_credit_voucher object from the database.
 *
 * @param $voucher_id
 *   The voucher ID.
 * @param $voucher_revision_id
 *   The voucher revision ID (but this module doesn't support revisions).
 * @param $reset
 *   Whether to reset the commerce_credit_voucher_load cache.
 *
 * @return
 *   A fully-populated commerce_credit_voucher object, or FALSE if the
 *   commerce_credit_voucher is not found.
 */
function commerce_credit_voucher_load($voucher_id = NULL, $voucher_revision_id = NULL, $reset = FALSE) {
  $voucher_ids = isset($voucher_id) ? array($voucher_id) : array();
  $conditions = array();
  $commerce_credit_voucher = commerce_credit_voucher_load_multiple($voucher_ids, $conditions, $reset);

  return $commerce_credit_voucher ? reset($commerce_credit_voucher) : FALSE;
}


/**
 * Loads a commerce_credit_voucher object by code from the database.
 *
 * @param $code
 *   The voucher code.
 * @param $force_active
 *   Force to only list active vouchers.
 * @param $force_date_range
 *   Force to only list vouchers within a valid date range.
 *
 * @return
 *   A fully-populated commerce_credit_voucher object, or FALSE if the
 *   commerce_credit_voucher is not found.
 */
function commerce_credit_voucher_load_by_code($code, $force_active = TRUE, $force_date_range = TRUE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_credit_voucher')
        ->propertyCondition('code', $code);

  // Make sure only active vouchers are pulled out.
  if ($force_active) {
    $query->propertyCondition('is_active', $force_active);
  }

  // Make sure only vouchers within the start and end date range are pulled out.
  if ($force_date_range) {
    $query->propertyCondition('start_date', strtotime("now"), '<');
    $query->propertyCondition('end_date', strtotime("now"), '>');
  }

  // Finally execute the query.
  $entities = $query->execute();

  $return = FALSE;

  if (isset($entities['commerce_credit_voucher'])) {
    $voucher_ids = array_keys($entities['commerce_credit_voucher']);
    $commerce_credit_voucher = commerce_credit_voucher_load_multiple($voucher_ids);

    $return = $commerce_credit_voucher ? reset($commerce_credit_voucher) : FALSE;
  }

  return $return;
}


/**
 * Deletes a credit voucher by ID.
 *
 * @param $voucher_id
 *   The ID of the credit voucher to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_credit_voucher_delete($voucher_id) {
  return commerce_credit_voucher_delete_multiple(array($voucher_id));
}


/**
 * Deletes multiple credit vouchers by ID.
 *
 * @param $voucher_ids
 *   An array of credit voucher IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_credit_voucher_delete_multiple($voucher_ids) {
  return entity_get_controller('commerce_credit_voucher')->delete($voucher_ids);
}


/**
 * Checks credit voucher access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $commerce_credit_voucher
 *   Optionally a commerce credit voucher object to check access for.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function commerce_credit_voucher_access($op, $commerce_credit_voucher = NULL, $account = NULL) {
  return commerce_entity_access($op, $commerce_credit_voucher, $account, 'commerce_credit_voucher');
}


/**
 * Returns an initialized commerce credit voucher object.
 *
 * @param $type
 *   The commerce credit voucher type.
 *
 * @return
 *   A commerce credit voucher object with all default fields initialized.
 */
function commerce_credit_voucher_new($type = '') {
  return entity_get_controller('commerce_credit_voucher')->create(array('type' => $type));
}


/**
 * Saves a commerce credit voucher.
 *
 * @param $commerce_credit_voucher
 *   The full commerce credit voucher object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_credit_voucher_save($commerce_credit_voucher) {
  return entity_get_controller('commerce_credit_voucher')->save($commerce_credit_voucher);
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_credit_voucher_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_credit_voucher'] = array(
    'title' => t('Credit Voucher'),
    'description' => t('Takes the value of vouchers off the order total amount.'),
    'active' => TRUE,
  );

  return $payment_methods;
}


/**
 * Payment method callback: submit form.
 */
function commerce_credit_voucher_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_credit_voucher'])) {
    $pane_values += $order->data['commerce_credit_voucher'];
  }

  // Merge in default values.
  $pane_values += array(
    'voucher_code' => '',
  );

  $form['voucher_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Voucher Code'),
    '#default_value' => $pane_values['voucher_code'],
    '#required' => TRUE,
  );

  return $form;
}


/**
 * Payment method callback: submit form validation.
 */
function commerce_credit_voucher_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  $ret = FALSE;

  if (trim($pane_values['voucher_code']) != '') {
    $errors = commerce_credit_voucher_is_invalid($pane_values['voucher_code'], $order);
    if ($errors) {
      foreach ($errors as $error) {
        drupal_set_message(t($error), 'error');
      }
    }
    else {
      $ret = TRUE;
    }
  }

  return $ret;
}


/**
 * Payment method callback: submit form submission.
 */
function commerce_credit_voucher_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_credit_voucher'] = $pane_values;

  $commerce_credit_voucher = commerce_credit_voucher_load_by_code($pane_values['voucher_code']);

  // Work out how much the user is going to be charged for.
  if ($charge['amount'] <= $commerce_credit_voucher->amount) {
    $ret = TRUE;
  }
  else {
    $charge['amount'] = $commerce_credit_voucher->amount;
    $ret = FALSE;
  }

  // Confirmation message.
  drupal_set_message(t('The credit voucher has been applied.'));

  // Perform a transaction.
  commerce_credit_voucher_transaction($payment_method, $order, $charge, $commerce_credit_voucher);

  return $ret;
}


/**
 * Creates a payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $commerce_credit_voucher
 *   The full commerce_credit_voucher object.
 */
function commerce_credit_voucher_transaction($payment_method, $order, $charge, $commerce_credit_voucher) {
  $transaction = commerce_payment_transaction_new('commerce_credit_voucher', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Voucher Code: @code';
  $transaction->message_variables = array('@code' => $commerce_credit_voucher->code, '@sku' => $commerce_credit_voucher->sku);

  commerce_payment_transaction_save($transaction);
}


/**
 * Checks if a given credit voucher is invalid for a given code and order.
 *
 * @param $code
 *   The credit voucher code to validate.
 * @param $order
 *   The order at against the $code should be validated.
 *
 * @return boolean
 *   Returns FALSE is credit voucher is invalid or an array of messages otherwise.
 */
function commerce_credit_voucher_is_invalid($code, $order) {
  $errors = array();

  // Most basic validation ever.
  if (!commerce_credit_voucher_check_credit_voucher_is_active($code)) {
    $errors[] = 'Unable to process the credit voucher entered because it does not exist.';
  }

  // Still pretty basic validation.
  if (empty($errors)) {
    if (!commerce_credit_voucher_check_credit_voucher_dates($code)) {
      $errors[] = 'Unable to process the credit voucher entered because it is either not available yet or expired.';
    }
    if (!commerce_credit_voucher_check_credit_voucher_amount($code)) {
      $errors[] = 'Unable to process the credit voucher entered because its amount is invalid.';
    }
    if (commerce_credit_voucher_get_number_of_uses_for_credit_voucher($code) <= 0) {
       $errors[] = 'Unable to process the credit voucher entered because its maximum number of uses has already been reached.';
    }
  }

  // Now that we know that the voucher exists and is valid, load it.
  $commerce_credit_voucher = commerce_credit_voucher_load_by_code($code, TRUE, TRUE);

  // More complex validation if there is no errors so far.
  if (empty($errors)) {
    if (commerce_credit_voucher_get_number_of_uses_for_credit_voucher($code, $order) != $commerce_credit_voucher->number_of_uses) {
       $errors[] = 'Unable to process the credit voucher entered because it has already been used in this order.';
    }
  }

  // Even more complex validation if there is no errors so far.
  if (empty($errors)) {
    // Get a list of SKU codes.
    $sku_codes = explode(',', $commerce_credit_voucher->sku);

    // Check if any product associated with the voucher is in the cart.
    if (!commerce_credit_voucher_check_products_exist_in_order($sku_codes, $order)) {
      $errors[] = 'Unable to process the credit voucher entered because the product associated with it is not in the cart.';
    }
  }

  return !empty($errors) ? $errors : FALSE;
}


/**
 * Checks if a given credit voucher exists and is active.
 *
 * @param $code
 *   The credit voucher code to validate.
 *
 * @return boolean
 *   Returns TRUE or FALSE.
 */
function commerce_credit_voucher_check_credit_voucher_is_active($code) {
  $commerce_credit_voucher = commerce_credit_voucher_load_by_code($code, TRUE, FALSE);
  return !empty($commerce_credit_voucher);
}


/**
 * Checks if a given credit voucher exists and can be used now (check date range).
 *
 * @param $code
 *   The credit voucher code to validate.
 *
 * @return boolean
 *   Returns TRUE or FALSE.
 */
function commerce_credit_voucher_check_credit_voucher_dates($code) {
  $commerce_credit_voucher = commerce_credit_voucher_load_by_code($code, TRUE, TRUE);
  return !empty($commerce_credit_voucher);
}


/**
 * Checks if a given credit voucher exists and its amount is greater than zero.
 *
 * @param $code
 *   The credit voucher code to validate.
 *
 * @return boolean
 *   Returns TRUE or FALSE.
 */
function commerce_credit_voucher_check_credit_voucher_amount($code) {
  $commerce_credit_voucher = commerce_credit_voucher_load_by_code($code, TRUE, FALSE);
  return ($commerce_credit_voucher->amount > 0);
}


/**
 * Check whether at least one SKU code of a given list is in the cart.
 *
 * @param $sku_codes
 *   An array of SKU codes.
 * @param $order
 *   The order object.
 *
 * @return boolean
 *   Returns TRUE or FALSE.
 */
function commerce_credit_voucher_check_products_exist_in_order($sku_codes, $order) {
  // Get a list of products in the cart with the specific quantities.
  $product_quantities = commerce_credit_voucher_get_product_quantities_for_order($order);

  // Loop over the list of SKU codes and check whether the products are in the cart.
  foreach ($sku_codes as $sku_code) {
    if (isset($product_quantities[trim($sku_code)])) {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Calculates how many times a credit voucher can still be used.
 *
 * @param $code
 *   The credit voucher code.
 * @param $order
 *   The order object (optional).
 *
 * @return integer
 *   Returns how many times a credit voucher can still be used.
 */
function commerce_credit_voucher_get_number_of_uses_for_credit_voucher($code, $order = NULL) {
  // Get a list of credit vouchers used in this order.
  $credit_voucher_quantities = commerce_credit_voucher_get_credit_vouchers_for_order($order);

  // Load a fresh credit voucher.
  $commerce_credit_voucher = commerce_credit_voucher_load_by_code($code, TRUE, TRUE);

  if (isset($credit_voucher_quantities[$code])) {
    $number_of_uses = $commerce_credit_voucher->number_of_uses - $credit_voucher_quantities[$code];
  }
  else {
    $number_of_uses = $commerce_credit_voucher->number_of_uses;
  }

  return $number_of_uses;
}


/**
 * Builds an array of products and quantities for a given order.
 *
 * @param $order
 *   The order object.
 *
 * @return array
 *   Returns an array of products with SKU as keys and quantities as values.
 */
function commerce_credit_voucher_get_product_quantities_for_order($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // List of line items in the cart.
  $commerce_line_items = $order_wrapper->commerce_line_items;

  // List of SKU codes with quantities.
  $product_quantities = array();

  foreach ($commerce_line_items as $commerce_line_item) {
    $product = $commerce_line_item->commerce_product->value();
    if (!isset($product_quantities[$product->sku])) {
      $product_quantities[$product->sku] = 0;
    }
    $product_quantities[$product->sku] += $commerce_line_item->quantity->value();
  }

  return $product_quantities;
}


/**
 * Builds an array of credit vouchers and how many times they have been used.
 *
 * @param $order
 *   The order object (optional).
 *
 * @return array
 *   Returns an array of credit vouchers with code as keys and how many times
 *   they have been used as values.
 */
function commerce_credit_voucher_get_credit_vouchers_for_order($order = NULL) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build an array of conditions to be used when filtering the transactions.
  $conditions = array('payment_method' => 'commerce_credit_voucher');
  if ($order) {
    $conditions['order_id'] = $order_wrapper->order_id->value();
  }

  // List of transactions for the order.
  $commerce_payment_transactions = commerce_payment_transaction_load_multiple(NULL, $conditions);

  // List of credit vouchers with number of uses.
  $credit_voucher_quantities = array();

  foreach ($commerce_payment_transactions as $commerce_payment_transaction) {
    $code = $commerce_payment_transaction->message_variables['@code'];
    if (!isset($credit_voucher_quantities[$code])) {
      $credit_voucher_quantities[$code] = 0;
    }
    $credit_voucher_quantities[$code]++;
  }

  return $credit_voucher_quantities;
}
