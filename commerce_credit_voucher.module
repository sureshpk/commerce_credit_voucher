<?php
/**
 * @file
 * Provides a credit voucher payment method for Drupal Commerce.
 */

/**
 * Implements hook_init().
 */
function commerce_credit_voucher_init() {
}


/**
 * Implements hook_entity_info().
 */
function commerce_credit_voucher_entity_info() {
  $entity_info = array();

  $entity_info['commerce_credit_voucher'] = array(
    'label' => t('Commerce Credit Voucher'),
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_credit_voucher',
    'uri callback' => 'commerce_credit_voucher_uri',
    'entity keys' => array(
      'id' => 'voucher_id',
    ),
    'bundles' => array(),
  );

  return $entity_info;
}


/**
 * Load node entities from the database.
 *
 * This function should be used whenever you need to load more than one voucher
 * from the database. Vouchers are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @param $nids
 *   An array of commerce credit voucher IDs.
 * @param $conditions
 *   (deprecated) An associative array of conditions on the {commerce_credit_voucher}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param $reset
 *   Whether to reset the internal node_load cache.
 *
 * @return
 *   An array of commerce_credit_voucher objects indexed by voucher_id.
 */
function commerce_credit_voucher_load_multiple($voucher_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_credit_voucher', $voucher_ids, $conditions, $reset);
}


/**
 * Load a commerce_credit_voucher object from the database.
 *
 * @param $voucher_id
 *   The voucher ID.
 * @param $voucher_revision_id
 *   The voucher revision ID (but this module doesn't support revisions).
 * @param $reset
 *   Whether to reset the commerce_credit_voucher_load cache.
 *
 * @return
 *   A fully-populated commerce_credit_voucher object, or FALSE if the
 *   commerce_credit_voucher is not found.
 */
function commerce_credit_voucher_load($voucher_id = NULL, $voucher_revision_id = NULL, $reset = FALSE) {
  $voucher_ids = isset($voucher_id) ? array($voucher_id) : array();
  $conditions = array();
  $commerce_credit_voucher = commerce_credit_voucher_load_multiple($voucher_ids, $conditions, $reset);

  return $commerce_credit_voucher ? reset($commerce_credit_voucher) : FALSE;
}


/**
 * Load a commerce_credit_voucher object by code from the database.
 *
 * @param $code
 *   The voucher code.
 *
 * @return
 *   A fully-populated commerce_credit_voucher object, or FALSE if the
 *   commerce_credit_voucher is not found.
 */
function commerce_credit_voucher_load_by_code($code) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'commerce_credit_voucher')
                    ->propertyCondition('code', $code)
                    ->execute();

  $voucher_ids = array_keys($entities['commerce_credit_voucher']);
  $commerce_credit_voucher = commerce_credit_voucher_load_multiple($voucher_ids);

  return $commerce_credit_voucher ? reset($commerce_credit_voucher) : FALSE;
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_credit_voucher_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_credit_voucher'] = array(
    'title' => t('Credit Voucher'),
    'description' => t('Takes the value of vouchers off the order total amount.'),
    'active' => TRUE,
  );

  return $payment_methods;
}


/**
 * Payment method callback: submit form.
 */
function commerce_credit_voucher_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_credit_voucher'])) {
    $pane_values += $order->data['commerce_credit_voucher'];
  }

  // Merge in default values.
  $pane_values += array(
    'voucher_code' => '',
  );

  $form['voucher_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Voucher Code'),
    '#default_value' => $pane_values['voucher_code'],
    '#required' => TRUE,
  );

  return $form;
}


/**
 * Payment method callback: submit form validation.
 */
function commerce_credit_voucher_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  return FALSE;
}


/**
 * Payment method callback: submit form submission.
 */
function commerce_credit_voucher_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_credit_voucher'] = $pane_values;

  commerce_credit_voucher_transaction($payment_method, $order, $charge, $pane_values['voucher_code']);
}


/**
 * Creates a payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $voucher_code
 *   The voucher code entered on the submission form.
 */
function commerce_credit_voucher_transaction($payment_method, $order, $charge, $voucher_code) {
  $transaction = commerce_payment_transaction_new('commerce_credit_voucher', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Voucher Code: @voucher_code';
  $transaction->message_variables = array('@voucher_code' => $voucher_code);

  commerce_payment_transaction_save($transaction);
}
