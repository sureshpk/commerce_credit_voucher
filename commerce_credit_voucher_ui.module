<?php
/**
 * @file
 * Provides a UI functionality for the credit voucher payment method module.
 */
 
/**
 * Implementation of hook_menu().
 */
function commerce_credit_voucher_ui_menu() {
  $items = array();

  // Note: admin/commerce/credit-vouchers is defined by a default View.

  $items['admin/commerce/credit-vouchers/add'] = array(
    'title' => 'Create a credit voucher',
    'page callback' => 'commerce_credit_voucher_ui_form_wrapper',
    'page arguments' => array(commerce_credit_voucher_new()),
    'access callback' => 'commerce_credit_voucher_access',
    'access arguments' => array('create'),
    'weight' => 10,
    'file' => 'commerce_credit_voucher_ui.pages.inc',
  );

  $items['admin/commerce/credit-vouchers/%commerce_credit_voucher'] = array(
    'title callback' => 'commerce_credit_voucher_ui_credit_voucher_title',
    'title arguments' => array(3),
    'page callback' => 'commerce_credit_voucher_ui_credit_voucher_view',
    'page arguments' => array(3),
    'access callback' => 'commerce_credit_voucher_access',
    'access arguments' => array('view', 3),
  );

  $items['admin/commerce/credit-vouchers/%commerce_credit_voucher/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -15,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/commerce/credit-vouchers/%commerce_credit_voucher/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'commerce_credit_voucher_ui_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_credit_voucher_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_credit_voucher_ui.pages.inc',
  );

  $items['admin/commerce/credit-vouchers/%commerce_credit_voucher/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'commerce_credit_voucher_ui_credit_voucher_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_credit_voucher_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_credit_voucher_ui.pages.inc',
  );

  return $items;
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_credit_voucher_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/credit-vouchers/add' on 'admin/commerce/credit-vouchers'.
  if ($root_path == 'admin/commerce/credit-vouchers') {
    $item = menu_get_item('admin/commerce/credit-vouchers/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * Implements hook_entity_info_alter().
 */
function commerce_credit_voucher_ui_entity_info_alter(&$entity_info) {
  // Add a URI callback to the commerce credit voucher entity.
  $entity_info['commerce_credit_voucher']['uri callback'] = 'commerce_credit_voucher_ui_credit_voucher_uri';
}


/**
 * Entity uri callback: points to the admin view page of the given credit voucher.
 */
function commerce_credit_voucher_ui_credit_voucher_uri($commerce_credit_voucher) {
  // First look for a return value in the default entity uri callback.
  $uri = commerce_credit_voucher_uri($commerce_credit_voucher);

  // If a value was found, return it now.
  if (!empty($uri)) {
    return $uri;
  }

  // Only return a value if the user has permission to view the credit voucher.
  if (commerce_credit_voucher_access('view', $commerce_credit_voucher)) {
    return array(
      'path' => 'admin/commerce/credit-vouchers/' . $commerce_credit_voucher->voucher_id,
    );
  }

  return NULL;
}


/**
 * Menu item title callback: returns the number of an order for its pages.
 *
 * @param $commerce_credit_voucher
 *   The commerce credit voucher object as loaded via the URL wildcard.
 *
 * @return
 *   A page title of the format "Credit voucher ##".
 */
function commerce_credit_voucher_ui_credit_voucher_title($commerce_credit_voucher) {
  return t('Credit voucher @voucher_id', array('@voucher_id' => $commerce_credit_voucher->voucher_id));
}


/**
 * Generate an array for rendering the given order.
 *
 * @param $commerce_credit_voucher
 *   A fully loaded commerce credit voucher object.
 * @param $view_mode
 *   The view mode for displaying the commerce credit voucher, 'administrator' or 'customer'.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function commerce_credit_voucher_ui_credit_voucher_view($commerce_credit_voucher, $view_mode = 'administrator') {
  return entity_view('commerce_credit_voucher', array($commerce_credit_voucher->voucher_id => $commerce_credit_voucher), $view_mode, NULL, TRUE);
}


/**
 * Callback function that sets a start and end date for a date element.
 */
function commerce_credit_voucher_ui_custom_date_element($form_element) {
  $start_year = isset($form_element['#start_year']) ? $form_element['#start_year'] : date('Y');
  $end_year = isset($form_element['#end_year']) ? $form_element['#end_year'] : date('Y') + 5;

  $form_element['year']['#options'] = drupal_map_assoc(range($start_year, $end_year));

	return $form_element;
}


/**
 * Implements hook_views_api().
 */
function commerce_credit_voucher_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_credit_voucher') . '/includes/views',
  );
}
