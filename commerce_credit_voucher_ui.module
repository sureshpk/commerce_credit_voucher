<?php
/**
 * @file
 * Provides a UI functionality for the credit voucher payment method module.
 */

/**
 * Implements hook_views_api().
 */
function commerce_credit_voucher_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_credit_voucher') . '/includes/views',
  );
}


/**
 * Implements hook_theme().
 */
function commerce_credit_voucher_ui_theme() {
  return array(
    'commerce_credit_voucher_type_add_page' => array(
      'variables' => array('types' => NULL),
      'file' => 'commerce_credit_voucher_ui.theme.inc',
    ),
    'commerce_credit_voucher_type_admin_overview' => array(
      'variables' => array('type' => NULL),
      'file' => 'commerce_credit_voucher_ui.theme.inc',
    ),
  );
}


/**
 * Implements hook_forms().
 */
function commerce_credit_voucher_ui_forms($form_id, $args) {
  $forms = array();

  if ($credit_voucher_types = commerce_credit_voucher_types()) {
    foreach ($credit_voucher_types as $type => $info) {
      $forms['commerce_credit_voucher_ui_' . $type . '_credit_voucher_form']['callback'] = 'commerce_credit_voucher_ui_form';
    }
  }

  return $forms;
}


/**
 * Implements hook_menu().
 */
function commerce_credit_voucher_ui_menu() {
  $items = array();

  // Note: admin/commerce/credit-vouchers is defined by a default View.

  $items['admin/commerce/credit-vouchers/add'] = array(
    'title' => 'Create a credit voucher',
    'page callback' => 'commerce_credit_voucher_ui_add_page',
    'access callback' => 'commerce_credit_voucher_access',
    'access arguments' => array('create'),
    'weight' => 10,
    'file' => 'commerce_credit_voucher_ui.pages.inc',
  );

  foreach (commerce_credit_voucher_types() as $type => $info) {
    $items['admin/commerce/credit-vouchers/add/' . strtr($type, '_', '-')] = array(
      'title' => 'Create Credit Voucher',
      'title callback' => 'commerce_credit_voucher_ui_add_credit_voucher_title',
      'title arguments' => array(4),
      'description' => $info->description,
      'description callback' => 'filter_xss_admin',
      'page callback' => 'commerce_credit_voucher_ui_form_wrapper',
      'page arguments' => array(commerce_credit_voucher_new($type)),
      'access callback' => 'commerce_credit_voucher_access',
      'access arguments' => array('create'),
      'weight' => 10,
      'file' => 'commerce_credit_voucher_ui.pages.inc',
    );
  }

  $items['admin/commerce/credit-vouchers/%commerce_credit_voucher'] = array(
    'title callback' => 'commerce_credit_voucher_ui_edit_credit_voucher_title',
    'title arguments' => array(3),
    'page callback' => 'commerce_credit_voucher_ui_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_credit_voucher_access',
    'access arguments' => array('update', 3),
    'weight' => -15,
    'file' => 'commerce_credit_voucher_ui.pages.inc',
  );

  $items['admin/commerce/credit-vouchers/%commerce_credit_voucher/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/commerce/credit-vouchers/%commerce_credit_voucher/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'commerce_credit_voucher_ui_credit_voucher_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_credit_voucher_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'commerce_credit_voucher_ui.pages.inc',
  );

  $items['admin/commerce/credit-vouchers/types'] = array(
    'title' => 'Credit voucher types',
    'description' => 'Manage credit voucher types for your store.',
    'page callback' => 'commerce_credit_voucher_ui_credit_voucher_types_overview',
    'access callback' => 'commerce_credit_voucher_access',
    'access arguments' => array('administer'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'commerce_credit_voucher_ui.pages.inc',
  );

  foreach (commerce_credit_voucher_types() as $type => $info) {
    $items['admin/commerce/credit-vouchers/types/' . strtr($type, '_', '-')] = array(
      'title' => $info->name,
      'page callback' => 'commerce_credit_voucher_ui_credit_voucher_type_redirect',
      'page arguments' => array($type),
      'access callback' => 'commerce_credit_voucher_access',
      'access arguments' => array('administer'),
    );
  }

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function commerce_credit_voucher_ui_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  foreach (commerce_credit_voucher_types() as $type => $info) {
    $items['admin/commerce/credit-vouchers/types/' . strtr($type, '_', '-') . '/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    $items['admin/commerce/credit-vouchers/types/' . strtr($type, '_', '-') . '/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  }
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_credit_voucher_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/credit-vouchers/add' on 'admin/commerce/credit-vouchers'.
  if ($root_path == 'admin/commerce/credit-vouchers') {
    $item = menu_get_item('admin/commerce/credit-vouchers/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function commerce_credit_voucher_ui_form_alter(&$form, &$form_state, $form_id) {
  // On field administration forms for commerce credit voucher types add a breadcrumb.
  if (in_array($form_id, array('field_ui_field_overview_form', 'field_ui_display_overview_form'))) {
    if ($form['#entity_type'] == 'commerce_credit_voucher') {
      // Load the commerce credit voucher type being modified for this form.
      $credit_voucher_type = commerce_credit_voucher_type_load($form['#bundle']);

      // Set the title
      drupal_set_title($credit_voucher_type->name);

      // Tweak the breadcrumb.
      commerce_credit_voucher_ui_set_breadcrumb(TRUE);
    }
  }

  // Change the label for the amount field when creating/editing a percentage credit voucher.
  if ($form_id == 'commerce_credit_voucher_ui_percentage_credit_voucher_form') {
    $form['amount']['#title'] = t('Percentage');
    $form['amount']['#description'] = t('For a 10% discount please type in 0.10');
  }
}


/**
 * Implements hook_entity_info_alter().
 */
function commerce_credit_voucher_ui_entity_info_alter(&$entity_info) {
  // Add a URI callback to the commerce credit voucher entity.
  $entity_info['commerce_credit_voucher']['uri callback'] = 'commerce_credit_voucher_ui_credit_voucher_uri';

  // Expose the admin UI for commerce credit voucher fields.
  foreach ($entity_info['commerce_credit_voucher']['bundles'] as $type => &$bundle) {
    $bundle['admin'] = array(
      'path' => 'admin/commerce/credit-vouchers/types/' . strtr($type, '_', '-'),
      'real path' => 'admin/commerce/credit-vouchers/types/' . strtr($type, '_', '-'),
      'access callback' => 'commerce_credit_voucher_access',
      'access arguments' => array('administer'),
    );
  }
}


/**
 * Entity uri callback: points to the admin view page of the given credit voucher.
 */
function commerce_credit_voucher_ui_credit_voucher_uri($commerce_credit_voucher) {
  // First look for a return value in the default entity uri callback.
  $uri = commerce_credit_voucher_uri($commerce_credit_voucher);

  // If a value was found, return it now.
  if (!empty($uri)) {
    return $uri;
  }

  // Only return a value if the user has permission to view the credit voucher.
  if (commerce_credit_voucher_access('view', $commerce_credit_voucher)) {
    return array(
      'path' => 'admin/commerce/credit-vouchers/' . $commerce_credit_voucher->voucher_id,
    );
  }

  return NULL;
}


/**
 * Menu item title callback: formats the page title of the create credit voucher form page.
 *
 * @param $type
 *   The commerce credit voucher type.
 *
 * @return
 *   A page title of the format "Create ## credit voucher".
 */
function commerce_credit_voucher_ui_add_credit_voucher_title($type) {
  $credit_voucher_type = commerce_credit_voucher_type_load($type);
  return t('Create a @name credit voucher', array('@name' => strtolower($credit_voucher_type->name)));
}


/**
 * Menu item title callback: formats the page title of the edit credit voucher form page.
 *
 * @param $commerce_credit_voucher
 *   The commerce credit voucher object as loaded via the URL wildcard.
 *
 * @return
 *   A page title of the format "Edit Credit voucher ##".
 */
function commerce_credit_voucher_ui_edit_credit_voucher_title($commerce_credit_voucher) {
  return t('Edit Credit voucher @voucher_id', array('@voucher_id' => $commerce_credit_voucher->voucher_id));
}


/**
 * Menu item access callback: redirects a commerce credit voucher type URL to its fields
 * management page.
 */
function commerce_credit_voucher_ui_credit_voucher_type_redirect($type) {
  drupal_goto('admin/commerce/credit-vouchers/types/' . strtr($type, '_', '-') . '/fields');
}


/**
 * Sets the breadcrumb for administrative pages.
 *
 * @param $credit_voucher_types
 *   TRUE or FALSE indicating whether or not the breadcrumb should include the
 *   commerce credit voucher types administrative page.
 */
function commerce_credit_voucher_ui_set_breadcrumb($credit_voucher_types = FALSE) {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Store'), 'admin/commerce'),
    l(t('Credit vouchers'), 'admin/commerce/credit-vouchers'),
  );

  if ($credit_voucher_types) {
    $breadcrumb[] = l(t('Credit voucher types'), 'admin/commerce/credit-vouchers/types');
  }

  drupal_set_breadcrumb($breadcrumb);
}


/**
 * Date form element callback: sets a start and end date of a date element.
 */
function commerce_credit_voucher_ui_custom_date_element($form_element) {
  $start_year = isset($form_element['#start_year']) ? $form_element['#start_year'] : date('Y');
  $end_year = isset($form_element['#end_year']) ? $form_element['#end_year'] : date('Y') + 5;

  $form_element['year']['#options'] = drupal_map_assoc(range($start_year, $end_year));

  return $form_element;
}
